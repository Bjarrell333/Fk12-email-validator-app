name: Build macOS Executable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      # 1. Check out the repository code.
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up Python.
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      # 3. Upgrade pip and install dependencies including PyInstaller and Pillow.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # If a requirements.txt exists, install its dependencies.
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install PyInstaller for building the executable and Pillow to auto-convert PNG icons on macOS.
          pip install pyinstaller Pillow

      # 4. Build the executable using PyInstaller.
      - name: Build executable with PyInstaller (macOS version)
        run: |
          # macOS Build Command:
          # - We use --onefile to bundle everything into a single file.
          # - --windowed prevents a terminal window from opening.
          # - --name email_validator_app produces an executable named "email_validator_app"
          #   (this is different from the Windows version, where you might prefer spaces and .ico files).
          # - --icon=icon.png is used here; Pillow will auto-convert the PNG to ICNS on macOS.
          # - --add-data uses a colon (:) as the delimiter on macOS.
          pyinstaller --onefile --windowed --name email_validator_app \
            --icon=icon.png \
            --add-data "icon.png:." \
            --add-data "header.png:." \
            email_validator_app.py

          # Windows Build Command Example (commented out):
          # If building on Windows, you might use an ICO file and semicolon as delimiter:
          # pyinstaller --onefile --windowed --name "FK12 Email Validator App" \
          #   --icon=icon.ico \
          #   --add-data "icon.ico;." \
          #   --add-data "header.png;." \
          #   email_validator_app.py

      # 5. List the contents of the dist folder for verification.
      - name: List built files
        run: ls -la dist

      # 6. Upload the built executable as an artifact.
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: email-validator-app
          path: dist/email_validator_app
